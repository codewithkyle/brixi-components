export default class t extends HTMLElement{constructor(){super(),this.handleBlur=()=>{this.validateInput()},this.handleInput=this.clearError.bind(this),this.handleClick=()=>{"password"===this.input.type?(this.input.type="text",this.visibleIcon.style.display="none",this.hiddenIcon.style.display="block"):(this.input.type="password",this.visibleIcon.style.display="block",this.hiddenIcon.style.display="none")},this.input=this.querySelector("input"),this.textEl=this.querySelector("p");const t=document.createElement("p");t.className="error",t.style.display="none",this.insertBefore(t,this.input),this.errorEl=t,this.button=this.querySelector("button"),this.visibleIcon=this.querySelector(".js-visible"),this.hiddenIcon=this.querySelector(".js-hidden")}validateInput(){if(this.input.required)if(""===this.input.value)"invalid"!==this.getAttribute("state")&&this.reportError("This field is required.");else if(new RegExp(/^[0-9]+$/).test(this.input.value))if(this.input.minLength||this.input.maxLength)if(this.input.minLength){if(this.input.minLength>this.input.value.length)return void this.reportError(`Pins must be at least ${this.input.minLength} numbers.`);this.clearError()}else{if(this.input.maxLength<this.input.value.length)return void this.reportError(`Pins cannot be more than ${this.input.maxLength} numbers.`);this.clearError()}else this.clearError();else"invalid"!==this.getAttribute("state")&&this.reportError("Invalid pin format.");else this.clearError()}reportError(t){this.errorEl.innerHTML=t,this.errorEl.style.display="block",this.textEl&&(this.textEl.style.display="none"),this.setAttribute("state","invalid")}clearError(){this.errorEl.style.display="none",this.textEl&&(this.textEl.style.display="block"),this.setAttribute("state","valid")}connectedCallback(){this.input.addEventListener("input",this.handleInput),this.input.addEventListener("blur",this.handleBlur),this.button.addEventListener("click",this.handleClick)}}